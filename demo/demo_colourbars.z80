;
; Title:        Area 51
; Author:       Dean Belfield
; Started:	20/12/2020
; Last Updated:	20/12/2020
;
; Requires:	output, keyboard
;
; Modinfo:
;

			DEVICE ZXSPECTRUM48			; sjasmplus directive for SAVESNA at end

Stack_Top:		EQU 0xFFF0
Code_Start:		EQU 0x8000

			ORG Code_Start

			JP Main

			include "../lib/output.z80"
			include "../lib/keyboard.z80"
			
Main:			DI
			LD SP,Stack_Top
			LD A,0x00
			OUT (254),A
			CALL Clear_Screen
			LD HL,Interrupt
			LD IX,0xFFF0
			LD (IX+04h),0xC3           	; Opcode for JP
			LD (IX+05h),L
			LD (IX+06h),H
			LD (IX+0Fh),0x18           	; Opcode for JR; this will do JR to FFF4h
			LD A,0x39
			LD I,A
			LD SP,0xFFF0
			IM 2
			EI
	
LOOP:			HALT				; Wait for NMI
			JR LOOP				; And loop

;			
; Interrupt routine
;
Interrupt:		DI
			PUSH AF
			PUSH BC
			PUSH DE
			PUSH HL
			PUSH IX
			EXX
			EX AF,AF'
			PUSH AF
			PUSH BC
			PUSH DE
			PUSH HL
			PUSH IY

			LD DE,(Colour_Table_Address)	; DE = Colour table address
			LD BC,0x226F			; BC = Timing loop values
			LD A,192			;  A = Number of rows
			CALL Colourbars_Effect
			LD HL,Colour_Table_Address	; Increment the low byte of the colour table
			INC (HL)			; address to scroll it

			POP IY
			POP HL
			POP DE
			POP BC
			POP AF
			EXX
			EX AF,AF'
			POP IX
			POP HL
			POP DE
			POP BC
			POP AF
			EI
			RET

; Colourbars Routine
; DE: Address of colour table (on page boundary)
;  C: Timing loop (course adjustmnt)
;  B: Timing loop (fine adjustment)
;  A: Number of rows to display (multiple of 8)
;
Colourbars_Effect:	LD (Colourbars_Effect_SP+1),SP	; Preserve the stack pointer   	
		
  			EXX				
  			EX AF,AF'		
  			LD HL,0x5800-5			; HL' = Attribute Address
  			LD DE,32			; DE' = Offset to next row of attributes
  			LD A,1				; AF' = Bit counter to count 8 rows
			EX AF,AF'
  			EXX
;
; This bit is a timing loop to wait for the raster to get past the border
;
1:			DJNZ 1B
			LD B,0x08
  			DEC C		
  			JR NZ,1B
;			
; Start the effect
; 
			LD B,A 				; Store loop counter in B
2:			LD A,(DE)			; Fetch the colour from DE
  			INC E				; Increment to next address in colour table
  			EXX				
  			LD C,A				; BC' is the colour to write out using the stack
			LD B,A				; So A->B and C
  			EX AF,AF'
  			RRCA				; Rotate the bit counter; this will trip a carry once every 8 times
  			JR NC,3F			; If there is no carry, then we redraw this row of attributes
  			ADD HL,DE			; If there is a carry, move to next row of attributes
  			JR 4F
3:			DUP 4				; This is to balance the timings if we've not done an ADD HL,DE
			NOP
			EDUP			
4: 			LD SP,HL			; Set the SP to the attribute address in HL'
			DUP 11				; Write out 22 bytes of colour
			PUSH BC
			EDUP
  			EXX
  			EX AF,AF'
  			DJNZ 2B				; Loop to do next scanline

Colourbars_Effect_SP:	LD SP,0				; Restore the stack pointer
			RET

Colour_Table_Address:	DW Colour_Table			; Pointer to the colour table
			ALIGN 256			; Colour table must be page aligned
Colour_Table:		DUP 8
			DB %00000000,%00001000,%00001000,%01001000,%01001000,%00101000,%01101000,%01111000
			DB %01111000,%01101000,%00101000,%01001000,%01001000,%00001000,%00001000,%00000000
			DB %00000000,%00010000,%00010000,%01010000,%01010000,%00011000,%01011000,%01111000
			DB %01111000,%01011000,%00011000,%01010000,%01010000,%00010000,%00010000,%00000000
			EDUP

Code_Length:		EQU $-Code_Start+1

			SAVESNA "Demo/demo_colourbars.sna", Code_Start

